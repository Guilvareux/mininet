#!/bin/bash

VIRTENABLED="$(egrep '(vmx|svm)' /proc/cpuinfo 2>&1 > /dev/null)"

#Test Virtualization enabled
if [ $? == 1 ]; then
    echo "Has hardware virtualization been enabled?"
    exit 1
fi

#Determine Host OS
if [ -f /etc/os-release ]; then
    # freedesktop.org and systemd
    . /etc/os-release
    OS=$NAME
    VER=$VERSION_ID
elif type lsb_release >/dev/null 2>&1; then
    # linuxbase.org
    OS=$(lsb_release -si)
    VER=$(lsb_release -sr)
elif [ -f /etc/lsb-release ]; then
    # For some versions of Debian/Ubuntu without lsb_release command
    . /etc/lsb-release
    OS=$DISTRIB_ID
    VER=$DISTRIB_RELEASE
elif [ -f /etc/debian_version ]; then
    # Older Debian/Ubuntu/etc.
    OS=Debian
    VER=$(cat /etc/debian_version)
elif [ -f /etc/SuSe-release ]; then
    # Older SuSE/etc.
    ...
elif [ -f /etc/redhat-release ]; then
    # Older Red Hat, CentOS, etc.
    ...
else
    # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
    OS=$(uname -s)
    VER=$(uname -r)
fi

#Edit dnsmasq configuration file
function edit_dnsmasq {
  echo 'edit dnsmasq'
  return 0
}

#Edit libvirtd configuration file
function edit_libvirtd {
  echo 'edit libvirtd'
  return 0
}

#Test for pre-installation. Setup may accidentally overwrite configuration files
DNSMASQI="$(dpkg -s dnsmasq 2>&1 > /dev/null)"
LIBVIRTI="$(dpkg -s libvirt-daemon-system 2>&1 > /dev/null)"
if [ "$DNSMASQI" == 0 ]; then
    echo 'WARNING: dnsmasq is already installed, have you backed up dnsmasq.conf'
    read -rsn1 "Do you wish to continue?... (y/N)" INPUT
    if [ "$INPUT" == "y" ] || [ "$INPUT" == "Y" ]; then
        edit_dnsmasq
    fi    
fi
if [ "$LIBVIRTI" == 0 ]; then
    echo 'WARNING: libvirt-daemon-system already installed, have you backed up libvirtd.conf?'
    read -rsn1 "Do you wish to continue?... (y/N)" INPUT
    if [ "$INPUT" == "y" ] || [ "$INPUT" == "Y" ]; then
        edit_libvirtd
    fi
fi

#Install all necessary packages for Debian
if [ "$OS" == "Debian GNU/Linux" ] && [ "$VER" == "10" ]; then
    REQPKGS="./debianpkgs.txt"
    PKGSTRING="apt install -y"
    PKGS=""
    while read -r line; do
      PKGS+=" ${line}"
    done < "$REQPKGS"
    eval "${PKGSTRING}${PKGS}"
    RESULT=$?
    if [ $RESULT == 0 ]; then
      echo "All packaged installed"
    fi
fi

#Reboot necessary?
USER="$(whoami)"
SUDO=""
if [ "$USER" == "root" ]; then
    $SUDO = "sudo "
fi
XENINSTALL="$(${SUDO}xl list \| grep Domain-0)"
if [ "$XENINSTALL" == "Domain-0" ]; then
    echo 'Host already running as Domain-0'
else
    echo 'Xen has been installed, restart and boot into Xen Hypervisor'
fi

exit 0